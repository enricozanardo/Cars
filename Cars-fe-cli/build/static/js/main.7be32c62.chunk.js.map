{"version":3,"sources":["inboxLogo_01.svg","web3.js","contract.js","App.js","reportWebVitals.js","index.js"],"names":["window","ethereum","request","method","web3","Web3","eth","Contract","inputs","internalType","name","type","stateMutability","outputs","App","useState","message","setMessage","newMessage","setNewMessage","isLoading","setIsLoading","useEffect","getMessage","a","contract","methods","call","blockchainMessage","handleSubmit","event","preventDefault","getAccounts","accounts","send","from","gas","gasPrice","className","src","logo","alt","color","height","width","style","onChange","value","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6hBAAe,MAA0B,yC,2BCEzCA,OAAOC,SAASC,QAAQ,CAAEC,OAAQ,wBAElC,IAEeC,EAFJ,IAAIC,IAAKL,OAAOC,UCyBZ,MAAIG,EAAKE,IAAIC,SAvBhB,CACV,CACEC,OAAQ,CAAC,CAAEC,aAAc,SAAUC,KAAM,iBAAkBC,KAAM,WACjEC,gBAAiB,aACjBD,KAAM,eAER,CACEH,OAAQ,GACRE,KAAM,UACNG,QAAS,CAAC,CAAEJ,aAAc,SAAUC,KAAM,GAAIC,KAAM,WACpDC,gBAAiB,OACjBD,KAAM,YAER,CACEH,OAAQ,CAAC,CAAEC,aAAc,SAAUC,KAAM,aAAcC,KAAM,WAC7DD,KAAM,aACNG,QAAS,GACTD,gBAAiB,aACjBD,KAAM,aArBM,8C,0BCkEDG,MA5Df,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEuBF,mBAAS,IAFhC,mBAENG,EAFM,KAEMC,EAFN,OAGqBJ,oBAAS,GAH9B,mBAGNK,EAHM,KAGKC,EAHL,KAMbC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAU,uCAAG,4BAAAC,EAAA,sEACaC,EAASC,QAAQV,UAAUW,OADxC,OACbC,EADa,OAEjBX,EAAWW,GAFM,2CAAH,qDASVC,EAAY,uCAAG,WAAOC,GAAP,eAAAN,EAAA,6DACnBM,EAAMC,iBACNV,GAAa,GAFM,SAKIjB,EAAKE,IAAI0B,cALb,cAKbC,EALa,gBASZR,EAASC,QAAQT,WAAWC,GAAYgB,KAAK,CAAEC,KAAMF,EAAS,GAAIG,IAAK,UAAWC,SAAU,eAThF,OAYnBd,IACAF,GAAa,GAbM,2CAAH,sDAiBlB,OACE,qBAAKiB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACxCrB,GACC,cAAC,IAAD,CAAQT,KAAK,UAAU+B,MAAM,UAAUC,OAAQ,GAAIC,MAAO,MAE1DxB,GACA,gCACG,oBAAGyB,MAAO,CAACH,MAAM,WAAjB,gDAAgE,oBAAIG,MAAO,CAACH,MAAM,WAAlB,SAA+B1B,IAA/F,OACA,gCACG,uBAAO6B,MAAO,CAACH,MAAM,WAArB,gCADH,IACqE,uBAClE,uBACAI,SAAU,SAAAhB,GAAK,OAlCViB,EAkCwBjB,EAAMkB,OAAOD,WAjCtD5B,EAAc4B,GADE,IAACA,KA+BR,QAKG,wBAAQE,QAAS,SAAAnB,GAAK,OAAID,EAAaC,IAAvC,0CChDDoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7be32c62.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/inboxLogo_01.42782d6f.svg\";","import Web3 from \"web3\";\n\nwindow.ethereum.request({ method: \"eth_requestAccounts\" });\n\nlet web3 = new Web3(window.ethereum);\n\nexport default web3;\n","import web3 from \"./web3\";\n\n// taken from the deployed contract on the Rinkeby network\nconst address = \"0x71ACF62a26f938F29E0b2cCcDA27C8D0CbD48bB6\";\n\n// taken from contracts_Inbox_sol_Inbox.abi\nconst abi = [\n  {\n    inputs: [{ internalType: \"string\", name: \"initialMessage\", type: \"string\" }],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"message\",\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"string\", name: \"newMessage\", type: \"string\" }],\n    name: \"setMessage\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\n// create an instance of this contract\nexport default new web3.eth.Contract(abi, address);\n","import logo from './inboxLogo_01.svg';\nimport './App.css';\n\n\nimport contract from './contract';\nimport { useEffect, useState } from 'react';\nimport web3 from './web3';\nimport Loader from 'react-loader-spinner';\n\nfunction App() {\n  const [message, setMessage] = useState('');\n  const [newMessage, setNewMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n\n  useEffect(() => {\n    getMessage();\n  }, [])\n\n  const getMessage = async () => {\n    let blockchainMessage = await contract.methods.message().call();\n    setMessage(blockchainMessage)\n  }\n\n  const inputText = (value) => {\n    setNewMessage(value);\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    // Get the accounts\n    const accounts = await web3.eth.getAccounts();\n\n    //Generate the transaction\n    // Use one of those accounts to deploy the contract\n     await contract.methods.setMessage(newMessage).send({ from: accounts[0], gas: '1000000', gasPrice: '5000000000'});\n    \n    //Update the view\n    getMessage()\n    setIsLoading(false);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {isLoading &&\n          <Loader type=\"Circles\" color=\"#F5A623\" height={80} width={80}/>\n        }\n        {!isLoading && (\n          <div>\n             <p style={{color:'#F5A623'}}>Last message on the blockchain is: <h4 style={{color:'#4A90E2'}}>{message}</h4> </p>\n             <div>\n                <label style={{color:'#F5A623'}}>&lt;Type New Message&gt;</label> <br/>\n                <input\n                onChange={event => inputText(event.target.value) }\n                /> &nbsp;\n                <button onClick={event => handleSubmit(event)}>Send Transaction</button>\n              </div>\n          </div>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}